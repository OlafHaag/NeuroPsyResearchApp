#:kivy 1.10.1

<UCMManager>:
    settings: app.settings
    ScreenHome:
    ScreenInstructCircleTask:
        name: 'Instructions CT'
    ScreenCircleTask:
    ScreenOutro:

<ScreenHome>:
    name: 'Home'
    on_leave: home_scroll.scroll_y = 1

    BoxLayout:
        orientation: 'vertical'

        ScrollView:
            id: home_scroll
            do_scroll_x: False
            do_scroll_y: True

            Label:
                text: root.home_msg
                markup: True
                text_size: root.width, None
                font_size: sp(24)
                size: self.texture_size
                size_hint_y: None
                padding: 10, 10
                halign: 'center'
                valign: 'middle'

        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: 0.2
            Button:
                text: _("Settings")
                on_release:
                    root.manager.transition.direction = 'up'
                    root.manager.transition.duration = 0.5
                    app.open_settings()
            Button:
                text: _("Proceed")
                on_release:
                    root.manager.transition.direction = 'up'
                    root.manager.transition.duration = 0.5
                    root.manager.current = root.manager.task_instructions[app.settings.task]

<ScreenInstructCircleTask>:  # When adding new task instruction, to share style add class like so: <TaskOne, TaskTwo>:
    settings: app.settings
    on_leave: instruct_scroll.scroll_y = 1

    BoxLayout:
        orientation: 'vertical'

        ScrollView:
            id: instruct_scroll
            do_scroll_x: False
            do_scroll_y: True

            Label:
                text: root.instruction_msg
                markup: True
                text_size: root.width, None
                font_size: sp(24)
                size: self.texture_size
                size_hint_y: None
                padding: 10, 10
                halign: 'center'
                valign: 'middle'
        Button:
            text: _("Start")
            size_hint_y: 0.2
            on_release:
                root.manager.transition.direction = 'up'
                root.manager.transition.duration = 0.5
                root.manager.current = app.settings.task

<ScreenCircleTask>:
    name: 'Circle Task'
    count_down: anim_label
    settings: app.settings

    AnchorLayout:
        anchor_x: 'left'
        anchor_y: 'center'

        #Label:
        #    text: 'df2 = {}'.format(df2.value)
        #    size_hint_x: None
        #    size_hint_y: 0.1
        #    size: self.texture_size
        #    pos_hint: {'left': 1}

        ScaleSlider:
            id: df1
            min: 0
            max: 100
            value: self.max * 0.1
            orientation: 'vertical'
            value_track_color: [0.25, 0.52, 0.95, 1]
            #cursor_image: 'res/sliderhandle_v_on.png'
            #cursor_disabled_image: 'res/sliderhandle_v_off.png'
            cursor_size: [sp(64)]*2
            padding: sp(48)
            sensitivity: 'handle'
            size_hint: None, 1

    AnchorLayout:
        anchor_x: 'right'
        anchor_y: 'center'

        #Label:
        #    text: 'df1 = {}'.format(df1.value)

        ScaleSlider:
            id: df2
            min: 0
            max: 100
            value: self.max * 0.1
            orientation: 'vertical'
            value_track_color: [0.25, 0.52, 0.95, 1]
            #cursor_image: 'res/sliderhandle_v_on.png'
            #cursor_disabled_image: 'res/sliderhandle_v_off.png'
            cursor_size: [sp(64)]*2
            padding: sp(48)
            sensitivity: 'handle'
            size_hint: None, 1

    FloatLayout:
        canvas:
            Color:
                rgb: 1, 1, 1
            Ellipse:
                size: [(df1.value_normalized + df2.value_normalized) * min(self.width, self.height) * 0.4] * 2
                pos:
                    [self.center_x - (df1.value_normalized + df2.value_normalized) * min(self.width, self.height) * 0.2,
                    self.center_y - (df1.value_normalized + df2.value_normalized) * min(self.width, self.height) * 0.2]

    # Goal Circle Task
    FloatLayout:
        canvas:
            Color:
                rgba: 0, 0.5, 0, .9
            Line:
                width: 2.
                circle: self.center_x, self.center_y, min(self.width, self.height) * 0.25

    # Goal Circle Task constrained
    FloatLayout:
        opacity: int(root.is_constrained)
        canvas:
            Color:
                rgb: 0.25, 0.52, 0.95
            Line:
                width: 5
                circle: self.center_x, self.center_y, min(self.width, self.height) * 0.25, 0, (int(not root.target2_switch) * df1.value_normalized + int(root.target2_switch) * df2.value_normalized) * 360
            Ellipse:
                size: [min(self.width, self.height) * 0.05] * 2
                pos: [self.center_x - min(self.width, self.height) * 0.025, self.center_y - min(self.width, self.height) * 0.275]

    CountDownCircle:
        id: anim_label
        text: str(int(self.start_count - (self.angle*self.start_count//360)))
        font_size: 50
        color: [1, 0, 1, 1]
        canvas:
            Color:
                rgba: 0.3, 0, 0.3, 0.7
            Line:
                circle: self.center_x, self.center_y, min(self.width, self.height) * 0.4, 0, self.angle % 360
                width: 5

    AnchorLayout:
        anchor_x: 'center'
        anchor_y: 'top'
        Label:
            text: root.progress
            text_size: root.width, None
            size: self.texture_size
            halign: 'center'
            valign: 'middle'
            size_hint: None, None

    #Debug
    #FloatLayout:
    #    Label:
    #        text: 'Radius = {}'.format(df1.value_normalized + df2.value_normalized)
    #        pos_hint: {'right': 1}
    #        color: [0, 1, 1, 1]

<ScreenOutro>:
    name: 'Outro'
    settings: app.settings

    BoxLayout:
        orientation: 'vertical'

        Label:
            text: root.outro_msg
            markup: True
            text_size: root.width, None
            size: self.texture_size
            halign: 'center'
            valign: 'middle'
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: 0.2
            Button:
                text: _("Send via E-Mail")
                disabled: not app.settings.is_email_enabled
                on_release:
                    app.send_email()
            Button:
                id: upload_btn
                text: _("Upload")
                disabled: not app.upload_btn_enabled
                on_release: root.on_update()
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: 0.2
            Button:
                text: _("Home")
                on_release:
                    app.settings.reset_current()
                    root.manager.go_home()
            Button:
                text: _("Quit")
                on_release: root.manager.quit()

<ScreenWebView>:
	name: 'Webview'
	BoxLayout:
		Label:
			id: info_label
			halign: 'center'

<SimplePopup>:
    id:pop
    size_hint: .4, .4
    auto_dismiss: False
    title: _("Information")
    BoxLayout:
        orientation: 'vertical'

        Label:
            id: pop_text
            text: root.msg
            text_size: root.width, None
            size: self.texture_size
            halign: 'center'
            valign: 'middle'
        Button:
            text: _("Close")
            on_release: pop.dismiss()

<BlockingPopup>:
    id:pop_block
    size_hint: .4, .4
    auto_dismiss: False
    title: _("Information")
    BoxLayout:
        orientation: 'vertical'

        Label:
            id: pop_block_text
            text: root.msg
            text_size: root.width, None
            size: self.texture_size
            halign: 'center'
            valign: 'middle'
